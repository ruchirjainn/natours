const express = require('express');
const morgan = require("morgan");
const path = require('path');
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const mongoSanitize = require('express-mongo-sanitize');
const xss = require('xss-clean');
const hpp = require('hpp');   // http parameter pollution
const cookieParser = require('cookie-parser');   // used for cookie / jwt / token generated by browser
const compression = require('compression');

const AppError = require('./utils/appError');
const globalErrorHandler = require('./controllers/errorController');
const tourRouter = require('./routes/toursRoutes');
const userRouter = require('./routes/userRoutes');
const reviewRouter = require('./routes/reviewRoutes');
const bookingRouter = require('./routes/bookingRoutes');
const viewRouter = require('./routes/viewRoutes');

// Start express app
const app = express();

// FOR SERVER SIDE RENDERING - FRONT END
app.set('view engine', 'pug');
app.set('views', path.join(__dirname, 'views'));   // better alternative for './views'

// 1) GLOBAL MIDDLE WARES

// SERVING STATIC FILES
// app.use(express.static(`${__dirname}/public`));   // Serve static files from the "public" folder & we can access inside files in browser now
app.use(express.static(path.join(__dirname, 'public')));

// SET SECURITY HTTP HEADERS
// app.use(helmet());
app.use(helmet({ contentSecurityPolicy: false }))

// Further HELMET configuration for Security Policy (CSP)
// const scriptSrcUrls = ['https://unpkg.com/',
//     'https://tile.openstreetmap.org'];
// const styleSrcUrls = [
//     'https://unpkg.com/',
//     'https://tile.openstreetmap.org',
//     'https://fonts.googleapis.com/'
// ];
// const connectSrcUrls = ['https://unpkg.com', 'https://tile.openstreetmap.org'];
// const fontSrcUrls = ['fonts.googleapis.com', 'fonts.gstatic.com'];

// set security http headers
// app.use(
//     helmet.contentSecurityPolicy({
//         directives: {
//             defaultSrc: [],
//             connectSrc: ["'self'", ...connectSrcUrls],
//             scriptSrc: ["'self'", ...scriptSrcUrls],
//             scriptSrc: ["'self'", 'https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js'],
//             styleSrc: ["'self'", "'unsafe-inline'", ...styleSrcUrls],
//             workerSrc: ["'self'", 'blob:'],
//             objectSrc: [],
//             imgSrc: ["'self'", 'blob:', 'data:', 'https:'],
//             fontSrc: ["'self'", ...fontSrcUrls]
//         }
//     })
// );

// DEVELOPMENT LOGGING
if (process.env.NODE_ENV === 'development') {
    app.use(morgan('dev'));
}

// LIMIT REQUEST FROM SAME API
const limiter = rateLimit({        // to check the limits go to header in postman 
    max: 100,           // maximum visit
    windowMs: 60 * 60 * 1000,           // unblocking the ip after windowMs times
    message: 'Too many request from this IP. Please try again in an hour'
});

app.use('/api', limiter);     // '/api' it effects all the routes starting with /api

// BODY PARSER - READING DATA FROM BODY INTO req.body
app.use(express.json({
    limit: '10kb'          // limits the size of req.body
}));
app.use(express.urlencoded({ extended: true, limit: '10kb' })); // used to parse data coming from url encoded form
app.use(cookieParser());

// DATA SANITIZATION AGAINST noSQl QUERY INJECTION
app.use(mongoSanitize());     // "email": { "$gt": "" } this method is used for this kind of edge queries injection

// DATA SANITIZATION AGAINST XSS
app.use(xss());      // ex:- converts the html brackets <>

// PREVENT PARAMETER POLLUTION
app.use(hpp({
    whitelist: ['duration', 'ratingsQauntity', 'ratingsAverage', 'maxGroupSize', 'difficulty', 'price']
}));

// Will Compress the text that is sent to client and not the images
// app.use(comprsression());

// TEST MIDDLEWARES
app.use((req, res, next) => {
    req.requestTime = new Date().toISOString();
    // console.log(req.cookies);
    next();
});

// UNORGANISED WAY OF USING MIDDLE WARE
/*
app.get("/", (req, res) => {
    res.status(200).json({ message: "hello", app: "Natours" });
});

app.post('/', (req, res) => {
    res.send("you can post to this url");
});
*/

// 3) ROUTES

// 3.1) METHOD - 1 - ROUTE HANDLER
/*
app.get('/api/v1/tours', getAllTours);
app.post('/api/v1/tours', createTour);
app.get('/api/v1/tours/:id', getTour);
app.patch('/api/v1/tours/:id', updateTour);
app.delete('/api/v1/tours/:id', deleteTour);
*/

// SERVER SIDE RENDERING FRONT END FILE
app.use('/', viewRouter);

// 3.2) METHOD - 2 - ROUTE HANDLER
app.use('/api/v1/tours', tourRouter);
app.use('/api/v1/users', userRouter);
app.use('/api/v1/reviews', reviewRouter);
app.use('/api/v1/bookings', bookingRouter);

// ALL THE URL'S WHICH ARE NOT DEFINED AND ARE INPUTTED WRONG
app.all('*', (req, res, next) => {   // all -> will execute for all http methods
    // res.status(404).json({
    //     status: "Failed",
    //     message: `Cant't find ${req.originalUrl} on this server`           // req.originalUrl gives the inputted url
    // });

    // const err = new Error(`Cant't find ${req.originalUrl} on this server`);
    // err.status = 'fail';
    // err.statusCode = 404;

    next(new AppError(`Cant't find ${req.originalUrl} on this server`, 404));        // err passed in parameter to next -> it skips all the middleware an directly jumps to GLOBAL HANDLING ERROR MIDDLEWARE
});

// GLOBAL HANDLING ERRORS
app.use(globalErrorHandler);

module.exports = app;